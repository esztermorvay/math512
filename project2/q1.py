from matplotlib import pyplot as plt
from scipy import stats
import random
def rng(x_n, m, a, c):
    """
    :param x_n: previous number randomly generated
    :type x_n: int
    :param m: modulus
    :type m: int
    :param a: multiplier
    :type a: int
    :param c: increment
    :type c: int
    :return: next number to be generated
    :rtype: int

    return x(n+1) given x(n)
    """
    x_n1 = (a * x_n + c) % m
    return x_n1

def create_histogram(nums):
    """
    :param nums: list of numbers to be plotted
    :type nums: list
    :return: None
    :rtype: None

    Creates a histogram of the numbers in nums
    """
    bins = 10
    plt.hist(nums, bins=bins)
    plt.title('Histogram of Random Numbers Between 0 and 1')
    plt.xlabel('Random Numbers Generated by Python')
    plt.ylabel('Frequency')
    save_name = "histogram_pyth_bins" +  str(bins) + ".png"
    plt.savefig(save_name)

# perform chi square test to check if the distribution is uniform
def chi_square(nums):
    """
    :param nums: list of numbers to be plotted
    :type nums: list
    :return: None
    :rtype: None

    Performs chi square test to check if the distribution is uniform
    """
    bins = 10
    # create bins
    bin_size = 1 / bins
    bin_counts = [0] * bins
    for num in nums:
        for i in range(1,bins+1):
            if num < bin_size*i:
                bin_counts[i-1] += 1
                break

    chi_val, p_val = stats.chisquare(bin_counts)
    print("Chi Square Value: " + str(chi_val))
    print("p-value: " + str(p_val))

def create_q2_mapping(probabilities, mappings, nums):
    # probbailities corresponding to the mappings (k)
    nums_generated = []
    for num in nums:
        total = 0
        for i in range(len(probabilities)):
            if num < total + probabilities[i]:
                nums_generated.append(mappings[i])
                break
            total += probabilities[i]

    return nums_generated

def q2_bar_graph(nums_generated):
    # count the number of each number in nums_generated and store it in a dictionary
    counts = {}
    for num in nums_generated:
        if num in counts:
            counts[num] += 1
        else:
            counts[num] = 1
    # get the keys as a sorted list
    keys = list(counts.keys())
    keys.sort()
    print(keys)
    vals = []
    for key in keys:
        vals.append(counts[key])
    keys_as_str = []
    for key in keys:
        keys_as_str.append(str(key))
    print(vals)
    plt.clf()
    plt.bar(keys_as_str, vals)
    plt.title('Distribution of Numbers Generated')
    plt.xlabel('K')
    plt.ylabel('Frequency')
    plt.savefig("q2_bar_graph.png")
def main():
    random.seed(34)
    nums = []
    nums_normalized = []
    x = []
    y = []
    # want to generate uniform 0, 1 10,000
    x_0 = 10
    m = 2**31 - 1
    a = 7**5
    c = 0
    x_n = x_0
    for i in range(10000):
        x.append(x_n/m)
        x_n = rng(x_n, m, a, c)
        y.append(x_n/m)
        nums.append(x_n)
        nums_normalized.append(x_n / m)

    # plt.scatter(x, y)
    # plt.title('Scatter Plot of Random Number Pairs Between 0 and 1')
    # plt.xlabel('X_n')
    # plt.ylabel('X_n+1')
    # plt.savefig("scatter_plot.png")
    # count the amount of unique numbers in nums
    # print(len(set(nums))) # since the length of the set = length of list all of them are different, which is a good sign

    # for i in range(10000):
    #     nums_normalized.append(random.uniform(0,1))


    # pretty print the normalized numbers, formatted to have exactly 20 characters each
    # for i in range(len(nums_normalized)):
    #     print("{:.20f}".format(nums_normalized[i]), end="        ")

    # print(nums_normalized)
    # create_histogram(nums_normalized)
    # chi_square(nums_normalized)
    # print(nums)

    """
    Q2
    """
    # create a mapping of numbers to probabilities
    probabilities = [0.1, 0.2, 0.3, 0.4]
    mappings = [15, 100, -200, 300]
    nums_generated = create_q2_mapping(probabilities, mappings, nums_normalized)
    q2_bar_graph(nums_generated)
    i = 0
    # for num in nums_generated:
    #     # format each number to 5 digits
    #     output = ""
    #
    #     if num == 15:
    #         output = "  "
    #     elif num != -200:
    #         output = " "
    #     output += str(num)
    #     print(output, end= "  ")
    #     if i % 10 == 0:
    #         print()
    #     i+= 1
if __name__ == '__main__':
    main()